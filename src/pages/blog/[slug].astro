---
import { Image } from 'astro:assets';
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.tsx';
import Footer from '../../components/Footer.tsx';
import CtaBlog from '../../components/CtaBlog.astro';
import { STRAPI_API_URL } from '../../config';
import { Markdown } from 'astro-remote';
import logo from '../../assets/logo.webp';

const currentPath = Astro.url.pathname;

export async function getStaticPaths() {
  const STRAPI_API_TOKEN = import.meta.env.STRAPI_API_TOKEN;
  const response = await fetch(`${STRAPI_API_URL}/api/articles?populate=*`, {
    headers: {
      'Authorization': `Bearer ${STRAPI_API_TOKEN}`,
    },
  });
  const { data } = await response.json();
  const posts = Array.isArray(data) ? data : [];

  return posts.map((post) => {
    if (!post || !post.slug) return null;
    return {
      params: { slug: post.slug },
      props: { post: post },
    };
  }).filter(Boolean);
}

const { post } = Astro.props;

const pageTitle = `${post.title} | Blog 100:1`;
const pageDescription = post.description;

let content = "";
const richTextBlock = post.blocks?.find(block => block.__component === 'shared.rich-text');
if (richTextBlock) {
  content = richTextBlock.body;
}

const coverImageUrl = post.cover?.formats?.large?.url || post.cover?.url;
const coverImageWidth = post.cover?.formats?.large?.width || post.cover?.width;
const coverImageHeight = post.cover?.formats?.large?.height || post.cover?.height;

const publishedAt = post.publishedAt;
const authorName = post.author?.name;
---

<Layout title={pageTitle} description={pageDescription}>
  <Navigation client:load currentPath={currentPath} logoSrc={logo.src} />
  <main class="bg-background text-foreground">
    <article class="max-w-4xl mx-auto px-4 py-16">
      <a href="/blog" class="inline-block text-accent mb-8 hover:underline font-semibold">
        &larr; Voltar para o Blog
      </a>
      
      <h1 class="text-4xl md:text-5xl font-bold font-montserrat text-title mb-4">{post.title}</h1>
      
      {(publishedAt || authorName) && (
        <div class="flex flex-wrap items-center text-foreground/70 mb-8 text-base">
          {publishedAt && (
            <span>{new Date(publishedAt).toLocaleDateString('pt-BR', { year: 'numeric', month: 'long', day: 'numeric' })}</span>
          )}
          {publishedAt && authorName && <span class="mx-2">â€¢</span>}
          {authorName && <span>Por {authorName}</span>}
        </div>
      )}

      {coverImageUrl && coverImageWidth && coverImageHeight && (
        <Image 
          src={coverImageUrl} 
          alt={post.title}
          width={coverImageWidth} 
          height={coverImageHeight}
          format="webp" 
          quality={80}
          class="w-full max-h-[500px] object-cover rounded-lg mb-8 shadow-lg"
        />
      )}

      <div class="prose prose-lg max-w-none prose-headings:text-title prose-p:text-foreground/90 prose-strong:text-title prose-a:text-accent prose-li:text-foreground/90 prose-blockquote:border-accent prose-blockquote:text-foreground/80">
        {content && <Markdown content={content} />}
      </div>

    </article>

    <CtaBlog />

  </main>
  <Footer client:load logoSrc={logo.src} />
</Layout>
